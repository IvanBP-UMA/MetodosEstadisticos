xx <- scan(str_c(localFolder, 'ts01.dat'))
xx <- scan(str_c(localFolder, 'ts01.dat'))
xx <- scan(str_c(localFolder, 'ts01.dat'))
xx <- scan(str_c(localFolder, 'ts01.dat'))
library(tidyverse)
xx <- scan(str_c(localFolder, 'ts01.dat'))
##############################################################
# M�todos estad�sticos para la computaci�n
# Escuela T�cnica Superior de Ingenier�a Inform�tica.
# Universidad de M�laga. Curso 2020 / 21
# Tema 3. Series temporales
##############################################################
library(tidyverse)
# La carpeta d�nde tengas los datos
localFolder='c:/data/'
##############################################################
# M�todos estad�sticos para la computaci�n
# Escuela T�cnica Superior de Ingenier�a Inform�tica.
# Universidad de M�laga. Curso 2020 / 21
# Tema 3. Series temporales
##############################################################
library('tidyverse')
# leemos los datos
# Le indicamos la frecuencia de la componente estacional
xx <- scan(str_c(localFolder, 'ts01.dat'))
# leemos los datos
# Le indicamos la frecuencia de la componente estacional
xx <- scan(str_c('ts01.dat'))
##############################################################
# M�todos estad�sticos para la computaci�n
# Escuela T�cnica Superior de Ingenier�a Inform�tica.
# Universidad de M�laga. Curso 2020 / 21
# Tema 3. Series temporales
##############################################################
library('tidyverse')
# La carpeta d�nde tengas los datos
localFolder='c:/data/'
# leemos los datos
# Le indicamos la frecuencia de la componente estacional
xx <- scan('ts01.dat')
view(xx)
xx
uk <- ts(xx, start=c(1969, 1), frequency=4)
uk
uk[1]
is.ts(xx)
is.ts(uk)
# Ejemplo del primer valor de la media movil de orden 3.
(uk[1] * .5 + uk[2] + uk[3] + uk[4] + uk[5] * .5) / 4
# Componente tendencia, mediante una media movil de orden 3
tend <- stats::filter(uk, c(.5, 1, 1, 1, .5) / 4)
tend
# Gr�fico de la serie con la tendencia en rojo
plot(uk)
lines(tend, col=2)
lines(tend)
lines(tend, col=2)
##############################################################
# Descomposici�n multiplicativa
##############################################################
# Componente estacional * aleatoria
est_aleM <- uk / tend
est_aleM
# Componente estacional sin normalizar
est1M <- colMeans(matrix(est_aleM, ncol=4, byrow=T), na.rm=T)
est1M
# Normalizo la componente estacional
estM  <- est1M / mean(est1M)
estM
# Componente estacional como serie temporal
estMC <- ts(rep(estM, 20), start=c(1969, 1), frequency=4)
estMC
rep(estM, 20)
# Componente aleatoria
aleM  <- est_aleM / estM
is.ts(est_aleM)
is.ts(estM)
aleM
est_aleM/estMC
aleM - est_aleM/estMC
# Serie desestacionalizada
desestM <- uk / estM
# Gr�fico de la serie desestacionalizada
plot(uk)
lines(desestM, col=4)
lines(tend, col=2)
##############################################################
# Uso del comando decompose. Debemos obtener los mismos resultados.
##############################################################
descM <- decompose(uk, type="mul")
descM
##############################################################
# Calculamos una regresi�n lineal de la serie desestacionalizada
##############################################################
# Esto mete en xx un vector 1:n, donde n es el tama�o de uk
xx <- seq_along(uk)
# regresi�n lineal
model <- lm(desestM ~ xx)
# Calculamos los valores predichos por la recta
regL <- ts(predict.lm(model), start=c(1969, 1), frequency=4)
# Hacemos un gr�fico de la serie desestacionalizada con la recta
plot(desestM)
lines(regL, col=2)
# Serie desestacionalizada
desestM <- uk / estM
# Hacemos un gr�fico de la serie desestacionalizada con la recta
plot(desestM)
lines(regL, col=2)
# Gr�fico de la serie desestacionalizada
plot(uk)
lines(desestA, col=4)
# Gr�fico de la serie desestacionalizada
plot(uk)
lines(desestM, col=4)
# Calculamos la autocorrelaci�n para frecuencia 4
autoCorrel(uk, 4)
##############################################################
# Autocorrelaci�n
##############################################################
# Funci�n que calcula la autocorrelaci�n para una frecuencia n
autoCorrel <- function(data, n) {
# Quita los n �ltimos datos
xx1 <- head(data, -n)
# Quita los n primeros datos
xx2 <- tail(data, -n)
# correlaci�n
summary(lm(xx1 ~ xx2))$r.squared
}
# Calculamos la autocorrelaci�n para frecuencia 4
autoCorrel(uk, 4)
# Quita los n �ltimos datos
xx1 <- head(data, -n)
dat <- uk
xx1 <- head(data, -4)
xx1
# Quita los n primeros datos
xx2 <- tail(data, -4)
xx2
data <- uk
xx1 <- head(data, -4)
xx1
# Quita los n primeros datos
xx2 <- tail(data, -4)
xx2
# correlaci�n
summary(lm(xx1 ~ xx2))$r.squared
# Calculamos las autocorrelaciones para frecuencias 1 a 12
acValues <- map_dbl(1:12, autoCorrel, data=uk)
# Y vemos que el m�ximo se alcanza con autocorrelaci�n 4, as� que es la frecuencia correcta.
acValues
which.max(acValues)
acValues[4]
library(tidyverse)
series <- ts(c(9.47, 9.26, 8.86, 8.25, 7.81, 8.01, 7.55, 7.24, 7.01, 6.88, 7.03), start=c(1973, 1), frequency = 1)
series
uk
series <- ts(c(9.47, 9.26, 8.86, 8.25, 7.81, 8.01, 7.55, 7.24, 7.01, 6.88, 7.03), start=c(1973, 1), frequency = 2)
series
series <- ts(c(9.47, 9.26, 8.86, 8.25, 7.81, 8.01, 7.55, 7.24, 7.01, 6.88, 7.03), start=c(1973, 1), frequency = 4)
series
#Media móvil orden 4
tend4 <- stats::filter(series, c(0.5, 1, 1, 1, 0.5) / 4)
tend5 <- stats::filter(series, c(1, 1, 1, 1, 1)/5)
plot(series)
abline(tend4)
lines(tend4)
lines(tend5)
lines(tend4, col='red')
lines(tend5, col='blue')
#Apartado b
decompose(series)
#Apartado b
decompose(series, type='mul')
mod <- lm(series ~ aux)
#Apartado b
aux <- 1:11
mod <- lm(series ~ aux)
plot(series, aux)
plot(aux, series)
abline(mod)
series <- ts(c(3.9, 4, 4.8, 5.1, 5, 5.5, 6.1, 6.3, 6.9), start = c(2016, 1), frequency = 3)
series
decompose(series)
tend <- stats::filter(sseries, c(1, 1, 1)/3)
tend <- stats::filter(series, c(1, 1, 1)/3)
est_ale <- series/tend
plot(series)
lines(tend)
estInd <- colMean(matrix(est_ale, ncol = 3, byrow = T), na.rm = T)
estInd <- colMeans(matrix(est_ale, ncol = 3, byrow = T), na.rm = T)
estInd
estNormalized = estInd/mean(estInd)
estTS = ts(resp(estNormalized, 3), start = c(2016,1), frequency = 3)
estTS = ts(rep(estNormalized, 3), start = c(2016,1), frequency = 3)
estTS
ale = series/estTS
seriesDesest = series/estTS
seriesDesest
series/estNormalized
ale
ale/estNormalized
series/estNormalized
plot(seriesDesest)
decompose(series, type='mul')
dc <- decompose(series, type='mul')
series / dc$seasonal
dat <- c(178.2, 156.7, 164.2, 153.2, 157.5, 172.6, 185.9, 185.8, 165, 163.6, 169, 183.1,
196.3, 162.8, 168.6, 156.9, 168.2, 180.2, 197.9, 195.9, 176, 166.4, 166.3, 183.9,
197.3, 173.7, 173.2, 159.7, 175.2, 187.4, 202.6, 205.6, 185.6, 175.6, 176.3, 191.7,
209.5, 186.3, 183, 169.5, 178.2, 186.7, 202.4, 204.9, 180.6, 179.8, 177.4, 188.9,
200, 188.7, 187.5, 168.6, 175.7, 189.4, 216.1, 215.4, 191.5, 178.5, 178.6, 195.6,
205.2, 179.6, 185.4, 172.4, 177.7, 202.7, 220.2, 210.2, 186.9, 181.4, 175.6, 195.6)
series <- ts(dat, start = c(1976, 1), frequency = 12)
series
#Apartado a
tend <- stats:filter(series, c(0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,5)/12)
#Apartado a
tend <- stats::filter(series, c(0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,5)/12)
plot(dat, tend)
plot(dat)
plot(series)
lines(tend, col='red')
#Apartado a
tend <- stats::filter(series, c(0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,5)/12)
tend
plot(series)
lines(tend, col='red')
series <- ts(c(9.47, 9.26, 8.86, 8.25, 7.81, 8.01, 7.55, 7.24, 7.01, 6.88, 7.03), start=c(1973, 1), frequency = 1)
#Apartado a
tend4 <- stats::filter(series, c(0.5, 1, 1, 1, 0.5) / 4)
plot(series)
lines(tend4, col='red')
tend4
dat <- c(178.2, 156.7, 164.2, 153.2, 157.5, 172.6, 185.9, 185.8, 165, 163.6, 169, 183.1,
196.3, 162.8, 168.6, 156.9, 168.2, 180.2, 197.9, 195.9, 176, 166.4, 166.3, 183.9,
197.3, 173.7, 173.2, 159.7, 175.2, 187.4, 202.6, 205.6, 185.6, 175.6, 176.3, 191.7,
209.5, 186.3, 183, 169.5, 178.2, 186.7, 202.4, 204.9, 180.6, 179.8, 177.4, 188.9,
200, 188.7, 187.5, 168.6, 175.7, 189.4, 216.1, 215.4, 191.5, 178.5, 178.6, 195.6,
205.2, 179.6, 185.4, 172.4, 177.7, 202.7, 220.2, 210.2, 186.9, 181.4, 175.6, 195.6)
series <- ts(dat, start = c(1976, 1), frequency = 12)
#Apartado a
tend <- stats::filter(series, c(0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,5)/12)
plot(series)
lines(tend, col='red')
lines(tend)
est_ale <- series/tend
est <- colMeans(matrix(est_ale, ncol = 12, byrow = T) na.rm = T)
est <- colMeans(matrix(est_ale, ncol = 12, byrow = T), na.rm = T)
est
est_ale
tend
tend4
#Apartado a
tend <- stats::filter(series, c(0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,5)/12)
dat <- c(178.2, 156.7, 164.2, 153.2, 157.5, 172.6, 185.9, 185.8, 165, 163.6, 169, 183.1,
196.3, 162.8, 168.6, 156.9, 168.2, 180.2, 197.9, 195.9, 176, 166.4, 166.3, 183.9,
197.3, 173.7, 173.2, 159.7, 175.2, 187.4, 202.6, 205.6, 185.6, 175.6, 176.3, 191.7,
209.5, 186.3, 183, 169.5, 178.2, 186.7, 202.4, 204.9, 180.6, 179.8, 177.4, 188.9,
200, 188.7, 187.5, 168.6, 175.7, 189.4, 216.1, 215.4, 191.5, 178.5, 178.6, 195.6,
205.2, 179.6, 185.4, 172.4, 177.7, 202.7, 220.2, 210.2, 186.9, 181.4, 175.6, 195.6)
series <- ts(dat, start = c(1976, 1), frequency = 12)
plot(series)
#Apartado a
tend <- stats::filter(series, c(0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,5)/12)
tend
#Apartado a
tend <- stats::filter(series, c(0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5)/12)
tend
plot(series)
lines(tend)
lines(tend, col='red')
est_ale <- series/tend
est <- colMeans(matrix(est_ale, ncol = 12, byrow = T), na.rm = T)
est
estNormalized <- est / mean(est)
seriesDesest <- series / estNormalized
plot(seriesDesest)
decompose(series, type = 'mul')$seasonal
#Apartado c
plot(series, col='red')
plot(seriesDesest, col='blue')
#Apartado c
plot(series, col='red')
lines(seriesDesest, col='blue')
#Apartado d
aux <- 1:72
tendReal <- lm(seriesDesest~aux)
#Apartado d
aux <- seq_along(series)
tendReal <- lm(seriesDesest~aux)
mod <- lm(seriesDesest~aux)
tendReal <- ts(predict.lm(mod), start = (1976, 1), frequency = 12)
tendReal <- ts(predict.lm(mod), start = (1976, 1), frequency = 12)
tendReal <- ts(predict.lm(mod), start = c(1976, 1), frequency = 12)
tendReal
decompose(series)
#Apartado e
ale <- est_ale/estNormalized
decompose(series, type = 'mul')
ciclic <- tend/tendReal
ciclic
